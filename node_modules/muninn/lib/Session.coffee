#+--------------------------------------------------------------------+
#  Session.coffee
#+--------------------------------------------------------------------+
#  Copyright DarkOverlordOfData (c) 2012 - 2013
#+--------------------------------------------------------------------+
#
#  This file is a part of Exspresso
#
#  Exspresso is free software you can copy, modify, and distribute
#  it under the terms of the MIT License
#
#+--------------------------------------------------------------------+
#
# Session Class
#

fs        = require('fs')
path      = require('path')
muninn    = require('../muninn')

class muninn.lib.Session

  cookie      = require('cookie')       # cookie parsing and serialization
  format      = require('util').format  # sprintf style formated string

  FLASH_KEY               = 'flash'     # flash data key prefix
  FLASH_NEW               = ':new:'     # flash data key ne w flag
  FLASH_OLD               = ':old:'     # flash data key old flag

  #
  # Session Constructor
  #
  # The constructor runs the session routines automatically
  # whenever the class is instantiated.
  #
  constructor: ($controller, $params = {}) ->

    muninn.logMessage 'debug', "Session Class Initialized"

    @req = $controller.req
    @res = $controller.res


    # expose flashdata method in views
    if @res.locals?
      @res.locals.flashdata = @flashdata
    else if @res.local
      @res.local('flashdata', @flashdata)
    else
      @res.flashdata = @flashdata

    #  Delete 'old' flashdata (from last request)
    @_flashdata_sweep()

    #  Mark all new flashdata as old (data will be deleted before next request)
    @_flashdata_mark()

    muninn.logMessage 'debug', "Session routines successfully run"




  #
  # Add or change data in the "userdata" array
  #
  # @access public
  # @param  [Mixed]  
  # @param  [String]    
  # @return [Void]  
  #
  setUserdata: ($newdata = {}, $newval = '') ->

    $data = @req.session.userdata = @req.session.userdata ? {}

    if typeof $newdata is 'string'
      $data[$newdata] = $newval

    else
      for $key, $val of $newdata
        $data[$key] = $val

    return

  #
  # Delete a session variable from the "userdata" array
  #
  # @access public
  # @param  [Mixed]  
  # @return [Void]  
  #
  unsetUserdata: ($newdata = {}) ->

    $data = @req.session.userdata = @req.session.userdata ? {}

    if typeof $newdata is 'string'
      delete $data[$newdata]

    else
      for $key, $val of $newdata
        delete $data[$key]

    return

  #
  # Fetch a specific item from the session array
  #
  # @access public
  # @param  [String]    
  # @return string
  #
  userdata: ($item, $default = false) ->

    $data = @req.session.userdata = @req.session.userdata ? {}

    if not $data[$item]? then $default else $data[$item]

  #
  # Fetch all session data
  #
  # @access public
  # @return [Mixed]  
  #
  allUserdata: () ->

    if not @req.session.userdata? then false else @req.session.userdata

  #
  # Add or change flashdata, only available
  # until the next request
  #
  # @param  [Mixed]
  # @param  [String]
  # @return [Void]
  #
  setFlashdata : ($newdata = {}, $args...) ->

    switch $args.length
      when 0 then $newval = ''
      when 1 then $newval = $args[0]
      else $newval = format.apply(undefined, $args)

    if typeof $newdata is 'string'
      $newdata = array($newdata, $newval)

    for $key, $val of $newdata
      $flashdata_key = FLASH_KEY + FLASH_NEW + $key
      @setUserdata($flashdata_key, $val)


  #
  # Keeps existing flashdata available to next request.
  #
  # @param  [String]
  # @return [Void]
  #
  keepFlashdata : ($key) ->
    #  'old' flashdata gets removed.  Here we mark all
    #  flashdata as 'new' to preserve it from _flashdata_sweep()
    #  Note the function will return FALSE if the $key
    #  provided cannot be found
    $old_flashdata_key = FLASH_KEY + FLASH_OLD + $key
    $value = @userdata($old_flashdata_key)

    $new_flashdata_key = FLASH_KEY + FLASH_NEW + $key
    @setUserdata($new_flashdata_key, $value)

  #
  # Fetch a specific flashdata item from the session array
  #
  # @param  [String]
  # @return	[String]
  #
  flashdata : ($key) =>

    $flashdata_key = FLASH_KEY + FLASH_OLD + $key
    return @userdata($flashdata_key)

  #
  # Identifies flashdata as 'old' for removal
  # when _flashdata_sweep() runs.
  #
  # @private
  # @return [Void]
  #
  _flashdata_mark :  ->
    $userdata = @allUserdata()
    for $name, $value of $userdata
      $parts = $name.split(FLASH_NEW)
      #if 'object' is typeof($parts) and Object.keys($parts).length is 2
      if $parts.length is 2
        $new_name = FLASH_KEY + FLASH_OLD + $parts[1]
        @setUserdata($new_name, $value)
        @unsetUserdata($name)

  #
  # Removes all flashdata marked as 'old'
  #
  # @private
  # @return [Void]
  #
  _flashdata_sweep :  ->
    $userdata = @allUserdata()
    for $key, $value of $userdata
      @unsetUserdata($key) unless $key.indexOf(FLASH_OLD) is -1


module.exports = muninn.lib.Session
