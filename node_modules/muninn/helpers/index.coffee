
class Util

  # rtrim
  #
  # right trim a string
  #
  # @param  [String] str  string to trim
  # @param  [String] char the character to trim
  # @return [String] the trimed string
  #
  @rtrim = rtrim = ($str, $chars = ' ') ->
  
    if $chars is ' '
      $str.replace(/[\s]+$/g, '')
    else if $chars is '/'
      $str.replace(/[\/]+$/g, '')
    else
      $str.replace(new RegExp("[" + $chars + "]+$", "g"), "")
  
  # ltrim
  #
  # left trim a string
  #
  # @param  [String] str  string to trim
  # @param  [String] char the character to trim
  # @return [String] the trimed string
  #
  @ltrim = ltrim = ($str, $chars = ' ') ->
  
    if $chars is ' '
      $str.replace(/^[\s]+/g, '')
    else if $chars is '/'
      $str.replace(/^[\/]+/g, '')
    else
      $str.replace(new RegExp("^[" + $chars + "]+", "g"), "")
  
  # rtrim
  #
  # trim a string
  #
  # @param  [String] str  string to trim
  # @param  [String] char the character to trim
  # @return [String] the trimed string
  #
  @trim = ($str, $chars = ' ') ->
  
    if $chars is ' ' then $str.replace(/^[\s]+/g, '').replace(/[\s]+$/g, '')
    else ltrim(rtrim($str, $chars), $chars)
  
  # ucfirst
  #
  # returns a string with the first char capitalized
  #
  # @param  [String] str  string to capitalize
  # @return [String] the capitalized string
  #
  @ucfirst = ($str) ->
    $str.charAt(0).toUpperCase() + $str.substr(1)


  # array
  #
  # collapse the argument list to a hash table
  # args alternate as key/value pairs
  #
  # @param  [Array]  args alternating key/value pairs
  # @return [String] a new object with 1 key/value pair
  #
  @array = ($args...) ->
    $array = {}
    for $key, $index in $args by 2
      $array[$key] = $args[$index+1]
    $array

module.exports = Util