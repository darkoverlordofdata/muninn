#+--------------------------------------------------------------------+
#| Sessions.coffee
#+--------------------------------------------------------------------+
#| Copyright DarkOverlordOfData (c) 2014
#+--------------------------------------------------------------------+
#|
#| This file is a part of Muninn
#|
#| Muninn is free software; you can copy, modify, and distribute
#| it under the terms of the MIT License
#|
#+--------------------------------------------------------------------+
#
#	Sessions
#
#
#
fs        = require("fs")                 # File system
path      = require('path')               # path utils
muninn    = require('../muninn')          # muninn core


class muninn.core.Sessions

  UID_ANONYMOUS = 1

  #
  # expose config as public properties
  #
  sess_driver             : 'sql'       # Session storage driver
  sess_encrypt_cookie     : false       # are cookies encrypted?
  sess_use_database       : false       # are sessions stored to database?
  sess_table_name         : ''          # storage table name in database
  sess_expiration         : 7200        # how long until the session expires
  sess_expire_on_close    : false       # expire session when browser is closed?
  sess_match_ip           : false       # match users ip to identify?
  sess_match_useragent    : true        # match the user agent to identify?
  sess_cookie_name        : 'sid'       # cookie name used for sessions
  cookie_prefix           : 'connect.'  # cookie name prefix used for sessions
  cookie_path             : ''          # path associated with cookies
  cookie_domain           : ''          # domain associated with cookies
  cookie_secure           : false       # using secure cookies?
  sess_time_to_update     : 300         # interval to update database
  encryption_key          : ''          # secure encryption key
  time_reference          : 'local'     # time specified as 'local' or 'gmt'

  constructor: ($server, $params = {}) ->

    muninn.logMessage 'debug', "Sessions Class Initialized"

    $config = $server.config
    for $key in ['sess_driver', 'sess_encrypt_cookie', 'sess_use_database', 'sess_table_name', 'sess_expiration', 'sess_expire_on_close', 'sess_match_ip', 'sess_match_useragent', 'sess_cookie_name', 'cookie_path', 'cookie_domain', 'cookie_secure', 'sess_time_to_update', 'time_reference', 'cookie_prefix', 'encryption_key']
      @[$key] = if ($params[$key]?) then $params[$key] else $config.item($key)

    if @encryption_key is ''
      muninn.showError 'In order to use the Session class you are required to set an encryption key in your config file.'

    #  Set the session length. If the session expiration is
    #  set to zero we'll set the expiration two years from now.
    if @sess_expiration is 0
      @sess_expiration = (60 * 60 * 24 * 365 * 2)


    $cookie_name = @cookie_prefix + @sess_cookie_name
    $driver = require($server.driver)
    Store = require(@sess_driver)($driver)

    $db = $config.item(@sess_driver, 'database')
    unless $db?
      muninn.showError 'No connection params found for session store [%s]', @sess_driver

    $store = new Store($db)
    $server.app.use $driver.cookieParser()
    # Set the ession middleware options
    $options =
      secret    : @encryption_key
      cookie    :
        domain    : @cookie_domain
        path      : @cookie_path
        name      : @sess_cookie_name
        secure    : @cookie_secure
        maxAge    : @sess_expiration
    $server.app.use $driver.session($options)

    #
    # Middleware
    #
    $server.app.use ($req, $res, $next) =>

      # parse the session id
      if $req.headers.cookie?
        if ($match = $req.headers.cookie.match(RegExp($cookie_name+"=([^ ,;]*)")))?
          $sid = $match[1].split('.')[0]
          $req.session.session_id = decodeURIComponent($sid).split(':')[1]

      # set reasonable session defaults
      $req.session.uid            = $req.session.uid || UID_ANONYMOUS
      $req.session.ip_address     = ($req.headers['x-forwarded-for'] || '').split(',')[0] || $req.connection.remoteAddress
      $req.session.user_agent     = $req.headers['user-agent']
      $req.session.last_activity  = @getTime()
      $req.session.userdata       = $req.session.userdata || {}

      $next()

  #
  # Get the "now" time
  #
  # @private
  # @return	[String]
  #
  getTime :  ->
    $date = new Date()
    $time = $date.getTime()
    if @time_reference.toLowerCase() is 'gmt'
      $time = $time - $date.getTimezoneOffset()
    return $time



module.exports = muninn.core.Sessions