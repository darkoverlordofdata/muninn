#+--------------------------------------------------------------------+
#| Server.coffee
#+--------------------------------------------------------------------+
#| Copyright DarkOverlordOfData (c) 2014
#+--------------------------------------------------------------------+
#|
#| This file is a part of Muninn
#|
#| Muninn is free software; you can copy, modify, and distribute
#| it under the terms of the MIT License
#|
#+--------------------------------------------------------------------+
#
#	Response Middleware
#
fs        = require("fs")                 # File system
path      = require('path')               # path utils
muninn    = require('../muninn')          # muninn core

#
# private class Vars
#
class Vars

  #
  # Provides variables to a view
  #
  # @param  [Array] args  a list of hash to merge into this
  #
  constructor = ($args...) ->

    for $data in $args
      for $key, $val of $data
        @[$key] = $val

class muninn.core.Response


  #
  # Represent
  #
  @poweredBy = ($name) -> ($req, $res, $next) ->
    $res.setHeader 'X-Powered-By', $name
    $next()

  #
  # Set the base url?
  #
  @baseUrl = ($config) -> ($req, $res, $next) ->
    if $config.item('base_url') is ''
      $protocol = if $req.connection.encrypted then 'https' else 'http'
      $config.setItem 'base_url', $protocol+'://'+ $req.headers['host']
    $next()

  #
  # Send JSON
  #
  # Send object as JSON
  #
  # @private
  # @param [Object] data  hash of variables to render with template
  # @return [Void]
  #
  @sendJSON = () -> ($req, $res, $next) ->
    $res.json = ($data = {}) ->
      $res.writeHead 200,
        'Content-Type'    : 'application/json; charset=utf-8'
      $res.end JSON.stringify($data)
      return
    $next()

  #
  # Redirect
  #
  # Redirect to another url
  #
  # @private
  # @param [String] url url to redirect to
  # @param [String] type  location | refresh
  # @param [String] url url to redirect to
  # @return [Void]
  #
  @redirectUrl = () -> ($req, $res, $next) ->
    $res.redirect = ($url, $type='location', $status = 302) ->

      switch $type
        when 'refresh'
          $res.writeHead $status,
            Refresh: 0
            url: $url
          $res.end null
        else
          $res.writeHead $status,
            Location: $url
          $res.end null
    $next()


  #
  # Render the view
  #
  # Create a new Variable instance to merge the $data param
  # with the flashdata, as well as the config values and
  # helpers that have been added to the prototype
  #
  # @private
  # @param [String] view  path to view template
  # @param [Object] data  hash of variables to render with template
  # @param [Funcion] next optional async callback
  # @return [Void]
  #
  @renderView = ($render) -> ($req, $res, $next) ->
    $res.render = ($view, $data = {}, $next) ->
      if typeof $data is 'function' then [$data, $next] = [{}, $data]

      # if it's not a filename, then directly render partial
      if Array.isArray($view)
        $html = $render.ect($view.join(''), new Vars($data))
        return $next(null, $html)

      if not fs.existsSync($view)
        return muninn.showError('Unable to load the requested file: %s', $view)
      #
      # Default terminal next
      #
      $next = $next ? ($err, $str) ->
        return $next($err) if $err
        $res.writeHead 200,
          'Content-Length'  : $str.length
          'Content-Type'    : 'text/html; charset=utf-8'
        $res.end $str
        return

      #
      # Read in the view file
      #
      fs.readFile $view, 'utf8', ($err, $str) ->
        return $next($err) if $err
        $ext = path.extname($view).replace('.','')

        if $render[$ext]?

          try
            $next(null, $render[$ext]($str, new Vars($data, filename: $view, flashdata: $res.flashdata)))

          catch $err
            muninn.showError $err

        else muninn.showError 'Invalid view file type: %s (%s)', $ext, $view

    $next()

module.exports = muninn.core.Response

