#+--------------------------------------------------------------------+
#| Server.coffee
#+--------------------------------------------------------------------+
#| Copyright DarkOverlordOfData (c) 2014
#+--------------------------------------------------------------------+
#|
#| This file is a part of Muninn
#|
#| Muninn is free software; you can copy, modify, and distribute
#| it under the terms of the MIT License
#|
#+--------------------------------------------------------------------+
#
#	Connect driver
#
#   An adapter to the connect server instance
#   adds render support for views
#   registers all of our middleware in the right order
#
#
fs        = require("fs")                 # File system
os        = require('os')                 # operating-system related utility functions
path      = require('path')               # path utils
http      = require('http')               # node server
cookie    = require('cookie')             # cookie parsing and serialization
sign      = require('cookie-signature')   # Sign and unsign cookies
dispatch  = require('dispatch')           # URL dispatcher for Connect
muninn    = require('../muninn')          # muninn core

Render    = muninn.loadClass('Render')    # Render helper class
Response  = muninn.loadClass('Response')  # Response middleware class
{ucfirst} = muninn.helpers

class muninn.core.Server extends muninn.core.Async


  http: null
  #
  # @property [String] http driver: connect | express
  #
  driver: 'express'
  #
  # @property [Object] app
  #
  app: null
  #
  # @property [Integer] port
  #
  port: 0xd16a
  #
  # @property [String] ip local address
  #
  port: '127.0.0.1'
  #
  # @property [muninn.core.Config] configuration
  #
  config: null
  #
  # @property [RenderView] render lib
  #
  render: null
  #
  # @property [String] driver version
  #
  version: ''


  #
  # inner class Vars
  #
  class Vars

    #
    # Provides variables to a view
    #
    # @param  [Array] args  a list of hash to merge into this
    #
    constructor: ($args...) ->

      for $data in $args
        for $key, $val of $data
          @[$key] = $val

  constructor: () ->

    muninn.logMessage 'debug', "Server Class Initialized"

    @config = muninn.config
    $driver = require(@driver)
    @version = @driver+' v'+$driver.version
    @initialize $driver


  #
  # Initialize the driver
  #
  # @param  [Object]  driver  http server object
  # @return [Void]
  #
  initialize:($driver) ->

    @app = $driver()
    @app.set 'port', @port = @config.item('http_port')
    @app.set 'ip', @ip = @config.item('http_ip')

    $render = new Render
    $response = new Response

    #
    # Template for initializing the server
    #
    @initializeLog $driver, $render
    @initializeAssets $driver, $render
    @initializeRequest $driver, $render
    @initializeResponse $driver, $render, $response

  #
  # Set view helpers
  #
  # Sets the autoloaded helpers on the Variables class
  # prototype. This makes them global to all views.
  #
  # @param  [Object] helpers hash of helpers to add
  # @return [Object] the helpers hash
  #
  setHelpers: ($helpers) ->
    for $key, $val of $helpers
      Vars::[$key] = $val
    $helpers

  #
  # Load required classes
  #
  # @return [Void]
  #
  loadComponents: ->

    # Add paths to search for components and controllers
    for $path in @config.item('autoload').plugins
      @config.addPath $path

    # Load selected core components
    for $name in @config.item('autoload').core
      Component = muninn.loadClass($name)
      @[$name] = new Component(@)

    # Load routes and controllers
    for $name in @config.item('autoload').controllers
      muninn.setRoutes muninn.loadClass($name, 'controllers')

  #
  # Careful with that axe, Eugene...
  #
  # @param [system.core.Router] router  the routing controller
  # @return [Void]
  #
  start: ($router, $ready) ->

    @http = http.createServer(@app)
    @loadComponents()

    #
    # Register routes
    #
    @app.use muninn.core.Exceptions.create().exceptionHandler()
    @app.use dispatch(muninn.routes)
    @app.use ($err, $req, $res, $next) -> muninn.showError $err
    @app.use ($req, $res, $next) -> muninn.show404 $req.originalUrl

    #
    # Run all the tasks that queued up during
    # autoload and then start listening on htto
    #
    @run ($err) =>

      @http.listen @port, @ip, =>
        muninn.logMessage 'info', "listening on port http://localhost:%d", @app.get('port')
        return
      return
    return


  #
  # Initialize the log
  #
  # @return [Void]
  #
  initializeLog: ($driver, $render) ->
    @app.use $driver.logger(@config.item('logger'))


  #
  # Initialize the assets
  #
  # @return [Void]
  #
  initializeAssets:($driver, $render) ->
    #
    # Expose asset folders
    #
    @app.use $driver.static(muninn.DOCPATH)
    @app.use $driver.favicon(path.join(muninn.DOCPATH, @config.item('favicon')))

  #
  # Initialize the request
  #
  # @return [Void]
  #
  initializeRequest: ($driver, $render) ->
    #
    # Request parsing
    #
    @app.use $driver.query()
    @app.use $driver.bodyParser()
    @app.use $driver.methodOverride()


  #
  # Initialize the response
  #
  # @return [Void]
  #
  initializeResponse: ($driver, $render, $response) ->

    @app.use $response.poweredBy "Muninn/"+ucfirst(@driver)
    @app.use $response.baseUrl @config
    @app.use $response.sendJSON()
    @app.use $response.redirectUrl()
    @app.use $response.renderView $render


