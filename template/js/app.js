(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var AppRouter, models, utils, views,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  utils = require('./utils');

  views = require('./views');

  models = require('./models');

  require('./models/Wine');

  require('./models/WineCollection');

  require('./views/AboutView');

  require('./views/HeaderView');

  require('./views/HomeView');

  require('./views/Paginator');

  require('./views/WineView');

  require('./views/WineListView');

  require('./views/WineListItemView');

  AppRouter = (function(_super) {
    __extends(AppRouter, _super);

    AppRouter.prototype.routes = {
      "": "home",
      "wines": "list",
      "wines/page/:page": "list",
      "wines/add": "addWine",
      "wines/:id": "wineDetails",
      "about": "about"
    };

    function AppRouter() {
      AppRouter.__super__.constructor.apply(this, arguments);
      this.headerView = new views.HeaderView();
      $(".header").html(this.headerView.el);
    }

    AppRouter.prototype.home = function(id) {
      if (!this.homeView) {
        this.homeView = new views.HomeView();
      }
      $("#content").html(this.homeView.el);
      return this.headerView.selectMenuItem("home-menu");
    };

    AppRouter.prototype.list = function(page) {
      var p, wineList;
      p = page ? parseInt(page, 10) : 1;
      wineList = new models.WineCollection();
      wineList.fetch({
        success: function() {
          return $("#content").html(new views.WineListView({
            model: wineList,
            page: p
          }).el);
        }
      });
      return this.headerView.selectMenuItem("home-menu");
    };

    AppRouter.prototype.wineDetails = function(id) {
      var wine;
      wine = new models.Wine({
        _id: id
      });
      wine.fetch({
        success: function() {
          return $("#content").html(new views.WineView({
            model: wine
          }).el);
        }
      });
      return this.headerView.selectMenuItem();
    };

    AppRouter.prototype.addWine = function() {
      var wine;
      wine = new models.Wine();
      $("#content").html(new views.WineView({
        model: wine
      }).el);
      return this.headerView.selectMenuItem("add-menu");
    };

    AppRouter.prototype.about = function() {
      if (!this.aboutView) {
        this.aboutView = new views.AboutView();
      }
      $("#content").html(this.aboutView.el);
      return this.headerView.selectMenuItem("about-menu");
    };

    return AppRouter;

  })(Backbone.Router);

  utils.loadTemplate(["HomeView", "HeaderView", "WineView", "WineListItemView", "AboutView"], function() {
    new AppRouter;
    return Backbone.history.start();
  });

}).call(this);

},{"./models":2,"./models/Wine":3,"./models/WineCollection":4,"./utils":5,"./views":6,"./views/AboutView":7,"./views/HeaderView":8,"./views/HomeView":9,"./views/Paginator":10,"./views/WineListItemView":11,"./views/WineListView":12,"./views/WineView":13}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {


}).call(this);

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var models,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  models = require('../models');

  models.Wine = (function(_super) {
    __extends(Wine, _super);

    Wine.prototype.urlRoot = "/wines";

    Wine.prototype.idAttribute = "_id";

    function Wine() {
      Wine.__super__.constructor.apply(this, arguments);
      this.validators = {};
      this.validators.name = function(value) {
        if (value.length > 0) {
          return {
            isValid: true
          };
        } else {
          return {
            isValid: false,
            message: "You must enter a name"
          };
        }
      };
      this.validators.grapes = function(value) {
        if (value.length > 0) {
          return {
            isValid: true
          };
        } else {
          return {
            isValid: false,
            message: "You must enter a grape variety"
          };
        }
      };
      this.validators.country = function(value) {
        if (value.length > 0) {
          return {
            isValid: true
          };
        } else {
          return {
            isValid: false,
            message: "You must enter a country"
          };
        }
      };
    }

    Wine.prototype.validateItem = function(key) {
      if (this.validators[key]) {
        return this.validators[key](this.get(key));
      } else {
        return {
          isValid: true
        };
      }
    };

    Wine.prototype.validateAll = function() {
      var check, key, messages;
      messages = {};
      for (key in this.validators) {
        if (this.validators.hasOwnProperty(key)) {
          check = this.validators[key](this.get(key));
          if (check.isValid === false) {
            messages[key] = check.message;
          }
        }
      }
      if (_.size(messages) > 0) {
        return {
          isValid: false,
          messages: messages
        };
      } else {
        return {
          isValid: true
        };
      }
    };

    Wine.prototype.defaults = {
      _id: null,
      name: "",
      grapes: "",
      country: "USA",
      region: "California",
      year: 0,
      description: "",
      picture: null
    };

    return Wine;

  })(Backbone.Model);

}).call(this);

},{"../models":2}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var models, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  models = require('../models');

  models.WineCollection = (function(_super) {
    __extends(WineCollection, _super);

    function WineCollection() {
      _ref = WineCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    WineCollection.prototype.model = models.Wine;

    WineCollection.prototype.url = "/wines";

    return WineCollection;

  })(Backbone.Collection);

}).call(this);

},{"../models":2}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var DOMFileSystem;

  DOMFileSystem = (function() {
    function DOMFileSystem() {}

    DOMFileSystem.prototype.readTemplateFile = function($template) {
      var el;
      if ((el = $('#' + $template)) != null) {
        return el.text();
      } else {
        throw Liquid.FileSystemError("Template not found: " + $template);
      }
    };

    return DOMFileSystem;

  })();

  Liquid.Template.fileSystem = new DOMFileSystem;

  module.exports = {
    loadTemplate: function(views, callback) {
      var classes, deferreds;
      classes = require('./views');
      deferreds = [];
      $.each(views, function(index, view) {
        if (classes[view]) {
          return deferreds.push($.get("tpl/" + view + ".liquid", function(template) {
            return classes[view].prototype.template = Liquid.Template.parse(template);
          }));
        } else {
          return alert(view + " not found");
        }
      });
      return $.when.apply(null, deferreds).done(callback);
    },
    displayValidationErrors: function(messages) {
      var key;
      for (key in messages) {
        if (messages.hasOwnProperty(key)) {
          this.addValidationError(key, messages[key]);
        }
      }
      return this.showAlert("Warning!", "Fix validation errors and try again", "alert-warning");
    },
    addValidationError: function(field, message) {
      var controlGroup;
      controlGroup = $("#" + field).parent().parent();
      controlGroup.addClass("error");
      return $(".help-inline", controlGroup).html(message);
    },
    removeValidationError: function(field) {
      var controlGroup;
      controlGroup = $("#" + field).parent().parent();
      controlGroup.removeClass("error");
      return $(".help-inline", controlGroup).html("");
    },
    showAlert: function(title, text, klass) {
      $(".alert").removeClass("alert-error alert-warning alert-success alert-info");
      $(".alert").addClass(klass);
      $(".alert").html("<strong>" + title + "</strong> " + text);
      return $(".alert").show();
    },
    hideAlert: function() {
      return $(".alert").hide();
    }
  };

}).call(this);

},{"./views":6}],6:[function(require,module,exports){
module.exports=require(2)
},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var views,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  views = require('../views');

  views.AboutView = (function(_super) {
    __extends(AboutView, _super);

    function AboutView(options) {
      this.options = options;
      AboutView.__super__.constructor.apply(this, arguments);
      this.render();
    }

    AboutView.prototype.render = function() {
      $(this.el).html(this.template.render());
      return this;
    };

    return AboutView;

  })(Backbone.View);

}).call(this);

},{"../views":6}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var views,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  views = require('../views');

  views.HeaderView = (function(_super) {
    __extends(HeaderView, _super);

    function HeaderView(options) {
      this.options = options;
      HeaderView.__super__.constructor.apply(this, arguments);
      this.render();
    }

    HeaderView.prototype.render = function() {
      $(this.el).html(this.template.render());
      return this;
    };

    HeaderView.prototype.selectMenuItem = function(menuItem) {
      $(".nav li").removeClass("active");
      if (menuItem) {
        return $("." + menuItem).addClass("active");
      }
    };

    return HeaderView;

  })(Backbone.View);

}).call(this);

},{"../views":6}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var views,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  views = require('../views');

  views.HomeView = (function(_super) {
    __extends(HomeView, _super);

    function HomeView(options) {
      this.options = options;
      HomeView.__super__.constructor.apply(this, arguments);
      this.render();
    }

    HomeView.prototype.render = function() {
      var src, template;
      $(this.el).html(this.template.render());
      src = "{% include 'hello-tpl' with current_user:'Fred' %}";
      template = Liquid.Template.parse(src);
      console.log('------------------');
      console.log(template.render());
      console.log('------------------');
      return this;
    };

    return HomeView;

  })(Backbone.View);

}).call(this);

},{"../views":6}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var views,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  views = require('../views');

  views.Paginator = (function(_super) {
    __extends(Paginator, _super);

    Paginator.prototype.className = "pagination pagination-centered";

    function Paginator(options) {
      this.options = options;
      Paginator.__super__.constructor.apply(this, arguments);
      this.model.bind("reset", this.render, this);
      this.render();
    }

    Paginator.prototype.render = function() {
      var i, items, len, pageCount;
      items = this.model.models;
      len = items.length;
      pageCount = Math.ceil(len / 8);
      $(this.el).html("<ul />");
      i = 0;
      while (i < pageCount) {
        $("ul", this.el).append("<li" + ((i + 1) === this.options.page ? " class='active'" : "") + "><a href='#wines/page/" + (i + 1) + "'>" + (i + 1) + "</a></li>");
        i++;
      }
      return this;
    };

    return Paginator;

  })(Backbone.View);

}).call(this);

},{"../views":6}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var views,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  views = require('../views');

  views.WineListItemView = (function(_super) {
    __extends(WineListItemView, _super);

    WineListItemView.prototype.tagName = "li";

    function WineListItemView(options) {
      this.options = options;
      WineListItemView.__super__.constructor.apply(this, arguments);
      this.model.bind("change", this.render, this);
      this.model.bind("destroy", this.close, this);
    }

    WineListItemView.prototype.render = function() {
      $(this.el).html(this.template.render(this.model.toJSON()));
      return this;
    };

    return WineListItemView;

  })(Backbone.View);

}).call(this);

},{"../views":6}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var views,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  views = require('../views');

  views.WineListView = (function(_super) {
    __extends(WineListView, _super);

    function WineListView(options) {
      this.options = options;
      WineListView.__super__.constructor.apply(this, arguments);
      this.render();
    }

    WineListView.prototype.render = function() {
      var endPos, i, len, startPos, wines;
      wines = this.model.models;
      len = wines.length;
      startPos = (this.options.page - 1) * 8;
      endPos = Math.min(startPos + 8, len);
      $(this.el).html("<ul class=\"thumbnails\"></ul>");
      i = startPos;
      while (i < endPos) {
        $(".thumbnails", this.el).append(new views.WineListItemView({
          model: wines[i]
        }).render().el);
        i++;
      }
      $(this.el).append(new views.Paginator({
        model: this.model,
        page: this.options.page
      }).render().el);
      return this;
    };

    return WineListView;

  })(Backbone.View);

}).call(this);

},{"../views":6}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var utils, views,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  utils = require('../utils');

  views = require('../views');

  views.WineView = (function(_super) {
    __extends(WineView, _super);

    function WineView(options) {
      this.options = options;
      WineView.__super__.constructor.apply(this, arguments);
      this.render();
    }

    WineView.prototype.render = function() {
      $(this.el).html(this.template.render(this.model.toJSON()));
      return this;
    };

    WineView.prototype.events = function() {
      return {
        "change": "change",
        "click .save": "beforeSave",
        "click .delete": "deleteWine",
        "drop #picture": "dropHandler"
      };
    };

    WineView.prototype.change = function(event) {
      var change, check, target;
      utils.hideAlert();
      target = event.target;
      change = {};
      change[target.name] = target.value;
      this.model.set(change);
      check = this.model.validateItem(target.id);
      if (check.isValid === false) {
        return utils.addValidationError(target.id, check.message);
      } else {
        return utils.removeValidationError(target.id);
      }
    };

    WineView.prototype.beforeSave = function() {
      var check;
      check = this.model.validateAll();
      if (check.isValid === false) {
        utils.displayValidationErrors(check.messages);
        return false;
      }
      this.saveWine();
      return false;
    };

    WineView.prototype.saveWine = function() {
      var _this = this;
      console.log("before save");
      return this.model.save(null, {
        success: function(model) {
          _this.render();
          app.navigate("wines/" + model.id, false);
          return utils.showAlert("Success!", "Wine saved successfully", "alert-success");
        },
        error: function() {
          return utils.showAlert("Error", "An error occurred while trying to delete this item", "alert-error");
        }
      });
    };

    WineView.prototype.deleteWine = function() {
      this.model.destroy({
        success: function() {
          alert("Wine deleted successfully");
          return window.history.back();
        }
      });
      return false;
    };

    WineView.prototype.dropHandler = function(event) {
      var e, reader;
      event.stopPropagation();
      event.preventDefault();
      e = event.originalEvent;
      e.dataTransfer.dropEffect = "copy";
      this.pictureFile = e.dataTransfer.files[0];
      reader = new FileReader();
      reader.onloadend = function() {
        return $("#picture").attr("src", reader.result);
      };
      return reader.readAsDataURL(this.pictureFile);
    };

    return WineView;

  })(Backbone.View);

}).call(this);

},{"../utils":5,"../views":6}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,
